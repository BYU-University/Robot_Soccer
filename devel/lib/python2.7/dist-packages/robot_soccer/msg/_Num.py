# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_soccer/Num.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Num(genpy.Message):
  _md5sum = "ad34ec599372090ffe818e3fe887923d"
  _type = "robot_soccer/Num"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 home1_x
float32 home1_y
float32 home1_theta
float32 home2_x
float32 home2_y
float32 home2_theta
float32 away1_x
float32 away1_y
float32 away1_theta
float32 away2_x
float32 away2_y
float32 away2_theta
float32 ball_x
float32 ball_y
float32 t
float32 tsys

"""
  __slots__ = ['home1_x','home1_y','home1_theta','home2_x','home2_y','home2_theta','away1_x','away1_y','away1_theta','away2_x','away2_y','away2_theta','ball_x','ball_y','t','tsys']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       home1_x,home1_y,home1_theta,home2_x,home2_y,home2_theta,away1_x,away1_y,away1_theta,away2_x,away2_y,away2_theta,ball_x,ball_y,t,tsys

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Num, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.home1_x is None:
        self.home1_x = 0.
      if self.home1_y is None:
        self.home1_y = 0.
      if self.home1_theta is None:
        self.home1_theta = 0.
      if self.home2_x is None:
        self.home2_x = 0.
      if self.home2_y is None:
        self.home2_y = 0.
      if self.home2_theta is None:
        self.home2_theta = 0.
      if self.away1_x is None:
        self.away1_x = 0.
      if self.away1_y is None:
        self.away1_y = 0.
      if self.away1_theta is None:
        self.away1_theta = 0.
      if self.away2_x is None:
        self.away2_x = 0.
      if self.away2_y is None:
        self.away2_y = 0.
      if self.away2_theta is None:
        self.away2_theta = 0.
      if self.ball_x is None:
        self.ball_x = 0.
      if self.ball_y is None:
        self.ball_y = 0.
      if self.t is None:
        self.t = 0.
      if self.tsys is None:
        self.tsys = 0.
    else:
      self.home1_x = 0.
      self.home1_y = 0.
      self.home1_theta = 0.
      self.home2_x = 0.
      self.home2_y = 0.
      self.home2_theta = 0.
      self.away1_x = 0.
      self.away1_y = 0.
      self.away1_theta = 0.
      self.away2_x = 0.
      self.away2_y = 0.
      self.away2_theta = 0.
      self.ball_x = 0.
      self.ball_y = 0.
      self.t = 0.
      self.tsys = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_16f.pack(_x.home1_x, _x.home1_y, _x.home1_theta, _x.home2_x, _x.home2_y, _x.home2_theta, _x.away1_x, _x.away1_y, _x.away1_theta, _x.away2_x, _x.away2_y, _x.away2_theta, _x.ball_x, _x.ball_y, _x.t, _x.tsys))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.home1_x, _x.home1_y, _x.home1_theta, _x.home2_x, _x.home2_y, _x.home2_theta, _x.away1_x, _x.away1_y, _x.away1_theta, _x.away2_x, _x.away2_y, _x.away2_theta, _x.ball_x, _x.ball_y, _x.t, _x.tsys,) = _struct_16f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_16f.pack(_x.home1_x, _x.home1_y, _x.home1_theta, _x.home2_x, _x.home2_y, _x.home2_theta, _x.away1_x, _x.away1_y, _x.away1_theta, _x.away2_x, _x.away2_y, _x.away2_theta, _x.ball_x, _x.ball_y, _x.t, _x.tsys))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.home1_x, _x.home1_y, _x.home1_theta, _x.home2_x, _x.home2_y, _x.home2_theta, _x.away1_x, _x.away1_y, _x.away1_theta, _x.away2_x, _x.away2_y, _x.away2_theta, _x.ball_x, _x.ball_y, _x.t, _x.tsys,) = _struct_16f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_16f = struct.Struct("<16f")
