// Generated by gencpp from file robot_soccer/balllocResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_SOCCER_MESSAGE_BALLLOCRESPONSE_H
#define ROBOT_SOCCER_MESSAGE_BALLLOCRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_soccer
{
template <class ContainerAllocator>
struct balllocResponse_
{
  typedef balllocResponse_<ContainerAllocator> Type;

  balllocResponse_()
    : timestamp(0)
    , x(0.0)
    , y(0.0)  {
    }
  balllocResponse_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , x(0.0)
    , y(0.0)  {
    }



   typedef int32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;




  typedef boost::shared_ptr< ::robot_soccer::balllocResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_soccer::balllocResponse_<ContainerAllocator> const> ConstPtr;

}; // struct balllocResponse_

typedef ::robot_soccer::balllocResponse_<std::allocator<void> > balllocResponse;

typedef boost::shared_ptr< ::robot_soccer::balllocResponse > balllocResponsePtr;
typedef boost::shared_ptr< ::robot_soccer::balllocResponse const> balllocResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_soccer::balllocResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_soccer::balllocResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_soccer

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'robot_soccer': ['/home/odroid/catkin_ws/src/robot_soccer/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_soccer::balllocResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_soccer::balllocResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_soccer::balllocResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_soccer::balllocResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_soccer::balllocResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_soccer::balllocResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_soccer::balllocResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfeed3c65524b12e19690fcc175741f8";
  }

  static const char* value(const ::robot_soccer::balllocResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfeed3c65524b12eULL;
  static const uint64_t static_value2 = 0x19690fcc175741f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_soccer::balllocResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_soccer/balllocResponse";
  }

  static const char* value(const ::robot_soccer::balllocResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_soccer::balllocResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 timestamp\n\
float64 x\n\
float64 y\n\
\n\
\n\
";
  }

  static const char* value(const ::robot_soccer::balllocResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_soccer::balllocResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct balllocResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_soccer::balllocResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_soccer::balllocResponse_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SOCCER_MESSAGE_BALLLOCRESPONSE_H
