// Generated by gencpp from file robot_soccer/velocities.msg
// DO NOT EDIT!


#ifndef ROBOT_SOCCER_MESSAGE_VELOCITIES_H
#define ROBOT_SOCCER_MESSAGE_VELOCITIES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_soccer
{
template <class ContainerAllocator>
struct velocities_
{
  typedef velocities_<ContainerAllocator> Type;

  velocities_()
    : wheel1(0.0)
    , wheel2(0.0)
    , wheel3(0.0)  {
    }
  velocities_(const ContainerAllocator& _alloc)
    : wheel1(0.0)
    , wheel2(0.0)
    , wheel3(0.0)  {
    }



   typedef float _wheel1_type;
  _wheel1_type wheel1;

   typedef float _wheel2_type;
  _wheel2_type wheel2;

   typedef float _wheel3_type;
  _wheel3_type wheel3;




  typedef boost::shared_ptr< ::robot_soccer::velocities_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_soccer::velocities_<ContainerAllocator> const> ConstPtr;

}; // struct velocities_

typedef ::robot_soccer::velocities_<std::allocator<void> > velocities;

typedef boost::shared_ptr< ::robot_soccer::velocities > velocitiesPtr;
typedef boost::shared_ptr< ::robot_soccer::velocities const> velocitiesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_soccer::velocities_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_soccer::velocities_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_soccer

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'robot_soccer': ['/home/odroid/catkin_ws/src/robot_soccer/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_soccer::velocities_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_soccer::velocities_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_soccer::velocities_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_soccer::velocities_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_soccer::velocities_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_soccer::velocities_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_soccer::velocities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bf8a374f335f8b6c15a5fc63f832467";
  }

  static const char* value(const ::robot_soccer::velocities_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bf8a374f335f8b6ULL;
  static const uint64_t static_value2 = 0xc15a5fc63f832467ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_soccer::velocities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_soccer/velocities";
  }

  static const char* value(const ::robot_soccer::velocities_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_soccer::velocities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header header\n\
float32 wheel1\n\
float32 wheel2\n\
float32 wheel3\n\
";
  }

  static const char* value(const ::robot_soccer::velocities_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_soccer::velocities_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel1);
      stream.next(m.wheel2);
      stream.next(m.wheel3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct velocities_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_soccer::velocities_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_soccer::velocities_<ContainerAllocator>& v)
  {
    s << indent << "wheel1: ";
    Printer<float>::stream(s, indent + "  ", v.wheel1);
    s << indent << "wheel2: ";
    Printer<float>::stream(s, indent + "  ", v.wheel2);
    s << indent << "wheel3: ";
    Printer<float>::stream(s, indent + "  ", v.wheel3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SOCCER_MESSAGE_VELOCITIES_H
